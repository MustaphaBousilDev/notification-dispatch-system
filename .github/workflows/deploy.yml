name: Docker CI/CD Pipelinefs

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

# Add permissions for the workflow
permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read

env:
  IMAGE_NAME: notifications-app
  CONTAINER_NAME: notifications-app

jobs:
  test:
    runs-on: ubuntu-latest
    name: 🧪 Test Application
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: 📦 Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        
      - name: 🔧 Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: ./app
        
      - name: 🧪 Run tests
        run: ./gradlew test
        working-directory: ./app
        
      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_number }}
          path: |
            app/build/test-results/
            app/build/reports/
          retention-days: 30

      - name: 📋 Test Summary
        run: |
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          if [ -f app/build/test-results/test/TEST-*.xml ]; then
            echo "✅ Tests completed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📁 Test artifacts uploaded for detailed review." >> $GITHUB_STEP_SUMMARY
            
            # Count test results
            TOTAL_TESTS=$(find app/build/test-results/test -name "TEST-*.xml" -exec grep -h "tests=" {} \; | sed 's/.*tests="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
            FAILED_TESTS=$(find app/build/test-results/test -name "TEST-*.xml" -exec grep -h "failures=" {} \; | sed 's/.*failures="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
            echo "📊 **Total Tests**: $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Failed Tests**: $FAILED_TESTS" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ No test results found!" >> $GITHUB_STEP_SUMMARY
          fi

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    name: 🚀 Build & Deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 📦 Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: 🔧 Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: ./app

      - name: 🏗️ Build application
        run: ./gradlew clean build -x test
        working-directory: ./app

      - name: 🔍 Verify JAR and PostgreSQL driver
        run: |
          echo "## 🔍 Build Verification" >> $GITHUB_STEP_SUMMARY
          echo "📋 Checking built JAR files..." | tee -a $GITHUB_STEP_SUMMARY
          ls -la ./app/build/libs/ | tee -a $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔍 Verifying PostgreSQL driver is included..." | tee -a $GITHUB_STEP_SUMMARY
          if jar tf ./app/build/libs/*.jar | grep postgresql >/dev/null; then
            echo "✅ PostgreSQL driver found in JAR" | tee -a $GITHUB_STEP_SUMMARY
            
            # Show PostgreSQL version
            PG_VERSION=$(jar tf ./app/build/libs/*.jar | grep "postgresql.*\.jar" | head -1 || echo "postgresql driver detected")
            echo "📦 Driver: $PG_VERSION" | tee -a $GITHUB_STEP_SUMMARY
          else
            echo "❌ PostgreSQL driver not found in JAR!" | tee -a $GITHUB_STEP_SUMMARY
            echo "📋 JAR contents preview:" | tee -a $GITHUB_STEP_SUMMARY
            jar tf ./app/build/libs/*.jar | head -20 | tee -a $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: 📋 Create deployment files
        run: |
          # Create environment file for deployment
          cat > .env << EOF
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          SPRING_PROFILE=production
          DEPLOYMENT_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          GIT_COMMIT=${{ github.sha }}
          GIT_BRANCH=${{ github.ref_name }}
          EOF
          
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🐳 Starting Docker deployment process..."
          echo "📅 Deployment Time: $(date)"
          echo "🔗 Git Commit: $GIT_COMMIT"
          echo "🌿 Git Branch: $GIT_BRANCH"
          
          # Colors for output
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          RED='\033[0;31m'
          BLUE='\033[0;34m'
          NC='\033[0m'
          
          print_status() { echo -e "${GREEN}[INFO]${NC} $1"; }
          print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
          print_error() { echo -e "${RED}[ERROR]${NC} $1"; }
          print_step() { echo -e "${BLUE}[STEP]${NC} $1"; }
          
          # Check Docker is available
          if ! command -v docker &> /dev/null; then
              print_error "Docker is not installed!"
              exit 1
          fi
          
          # Set Docker Compose command
          if docker compose version &> /dev/null; then
              DOCKER_COMPOSE="docker compose"
          else
              DOCKER_COMPOSE="docker-compose"
          fi
          
          print_status "Using: $DOCKER_COMPOSE"
          
          # Show current system status
          print_step "System Status Check"
          echo "💾 Disk Space:"
          df -h /
          echo "🧠 Memory:"
          free -h
          echo "🐳 Docker Info:"
          docker system df
          
          # Stop existing containers gracefully
          print_step "Stopping existing containers..."
          $DOCKER_COMPOSE down --timeout 30 || true
          
          # Create backup of database if it exists
          if docker volume ls | grep -q "postgres_data"; then
              print_step "Creating database backup..."
              docker run --rm -v postgres_data:/data -v $(pwd):/backup alpine:latest \
                tar czf /backup/postgres_backup_$(date +%Y%m%d_%H%M%S).tar.gz -C /data . || true
              print_status "Database backup created"
          fi
          
          # Clean up old resources
          print_step "Cleaning up old resources..."
          docker container prune -f || true
          docker image prune -f || true
          
          # Build and start services
          print_step "Building and starting services..."
          $DOCKER_COMPOSE build --no-cache
          $DOCKER_COMPOSE up -d
          
          # Wait for database to be ready
          print_step "Waiting for database to be ready..."
          for i in {1..30}; do
              if docker exec notifications-db pg_isready -U batch_user -d notifications >/dev/null 2>&1; then
                  print_status "Database is ready! ✅"
                  break
              fi
              echo "Waiting for database... ($i/30)"
              sleep 5
              
              if [ $i -eq 30 ]; then
                  print_error "Database failed to start!"
                  docker logs notifications-db --tail 20
                  exit 1
              fi
          done
          
          # Wait for application to start
          print_step "Waiting for application to start..."
          for i in {1..36}; do
              if curl -f -s http://localhost:8080/actuator/health >/dev/null 2>&1; then
                  print_status "Application is healthy! ✅"
                  break
              fi
              echo "Waiting for application... ($i/36)"
              sleep 10
              
              # Show progress every 6 attempts (1 minute)
              if [ $((i % 6)) -eq 0 ]; then
                  print_status "Application logs (last 10 lines):"
                  docker logs notifications-app --tail 10 || true
              fi
              
              if [ $i -eq 36 ]; then
                  print_error "Application failed to start!"
                  docker logs notifications-app --tail 50
                  exit 1
              fi
          done
          
          # Final health check and status
          print_step "Final verification..."
          if curl -f -s http://localhost:8080/actuator/health >/dev/null 2>&1; then
              print_status "🎉 Deployment completed successfully!"
              echo ""
              echo "📊 Final Status:"
              $DOCKER_COMPOSE ps
              echo ""
              echo "🏥 Health Check Response:"
              curl -s http://localhost:8080/actuator/health | python3 -c "import sys, json; print(json.dumps(json.load(sys.stdin), indent=2))" || curl -s http://localhost:8080/actuator/health
              echo ""
              echo "📈 Resource Usage:"
              docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"
          else
              print_error "❌ Application failed to start properly"
              exit 1
          fi
          EOF
          
          chmod +x deploy.sh

      - name: 🔍 Validate SSH Configuration
        run: |
          echo "## 🔍 SSH Configuration Check" >> $GITHUB_STEP_SUMMARY
          
          # Check if required secrets are set (without exposing values)
          if [ -z "${{ secrets.EC2_HOST }}" ]; then
            echo "❌ **EC2_HOST secret is not set**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          if [ -z "${{ secrets.EC2_USERNAME }}" ]; then
            echo "❌ **EC2_USERNAME secret is not set**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          if [ -z "${{ secrets.EC2_SSH_KEY }}" ]; then
            echo "❌ **EC2_SSH_KEY secret is not set**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "✅ **All SSH secrets are configured**" >> $GITHUB_STEP_SUMMARY

      # Step 2: Test SSH connection first
      - name: 🔍 Test SSH Connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          timeout: 30s
          script: |
            echo "✅ SSH connection successful!"
            echo "👤 Current user: $(whoami)"
            echo "🏠 Home directory: $HOME"
            echo "📁 Current directory: $(pwd)"
            
            # Prepare deployment directory
            mkdir -p ~/app
            echo "📁 Deployment directory prepared"

      - name: 📤 Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST || '13.219.90.34' }}
          username: ${{ secrets.EC2_USERNAME || 'deploy' }}
          key: ${{ secrets.EC2_SSH_KEY || '' }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: 22
          source: "./*"
          target: "~/app/"
          timeout: 180s
          overwrite: true
          debug: true
          strip_components: 0
          use_insecure_cipher: false

      - name: 🚀 Deploy to EC2
        id: deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          timeout: 300s
          command_timeout: 25m
          script: |
            set -e
            
            echo "🚀 Starting deployment on EC2..."
            echo "👤 Current user: $(whoami)"
            echo "📁 Current directory: $(pwd)"
            echo "⏰ Deployment time: $(date)"
            echo "🖥️  Server info: $(uname -a)"
            
            # Navigate to deployment directory
            cd ~/app
            
            # Show what was copied
            echo "📁 Deployment directory contents:"
            ls -la
            
            # Load environment variables
            if [ -f .env ]; then
                source .env
                echo "📋 Environment loaded"
            fi
            
            # Run deployment script
            echo "🏃 Running deployment script..."
            bash deploy.sh
            
            echo "✅ EC2 deployment completed successfully!"

      - name: 🏥 Final Health Check & Monitoring Setup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          timeout: 120s
          script: |
            echo "🏥 Performing final health checks and setting up monitoring..."
            
            cd ~/app
            if docker compose version &> /dev/null; then
                DOCKER_COMPOSE="docker compose"
            else
                DOCKER_COMPOSE="docker-compose"
            fi
            
            echo "📊 Container Status:"
            $DOCKER_COMPOSE ps
            
            echo ""
            echo "🏥 Application Health Check:"
            HEALTH_RESPONSE=$(curl -s http://localhost:8080/actuator/health || echo "Failed to get health")
            echo "$HEALTH_RESPONSE"
            
            if echo "$HEALTH_RESPONSE" | grep -q '"status":"UP"'; then
                echo "✅ Application is healthy and responding!"
            else
                echo "❌ Application health check failed"
                echo "📋 Recent logs:"
                docker logs notifications-app --tail 20
                exit 1
            fi
            
            echo ""
            echo "📈 Resource Usage:"
            docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"
            
            echo ""
            echo "💾 Disk Usage:"
            df -h / | tail -1
            
            # Create simple monitoring script
            cat > monitor.sh << 'EOF'
            #!/bin/bash
            echo "🐳 Application Status - $(date)"
            echo "====================================="
            cd ~/app
            docker-compose ps 2>/dev/null || docker compose ps
            echo ""
            echo "🏥 Health:"
            curl -s http://localhost:8080/actuator/health | grep -o '"status":"[^"]*"' || echo "Health check failed"
            echo ""
            echo "📊 Resources:"
            docker stats --no-stream --format "{{.Name}}: CPU {{.CPUPerc}}, Memory {{.MemUsage}}"
            EOF
            
            chmod +x monitor.sh
            
            echo ""
            echo "🎉 Deployment verification completed successfully!"
            echo "📋 Monitor script created: ~/app/monitor.sh"

      - name: 📊 Deployment Summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.deploy.outcome }}" == "success" ]; then
            echo "✅ **Deployment Status**: SUCCESS 🎉" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔗 Application Links" >> $GITHUB_STEP_SUMMARY
            echo "- **Application**: http://${{ secrets.EC2_HOST }}:8080" >> $GITHUB_STEP_SUMMARY
            echo "- **Health Check**: http://${{ secrets.EC2_HOST }}:8080/actuator/health" >> $GITHUB_STEP_SUMMARY
            echo "- **Metrics**: http://${{ secrets.EC2_HOST }}:8080/actuator/metrics" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📋 Deployment Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
            echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment Status**: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔍 Troubleshooting" >> $GITHUB_STEP_SUMMARY
            echo "1. Check the deployment logs above" >> $GITHUB_STEP_SUMMARY
            echo "2. SSH to server: \`ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}\`" >> $GITHUB_STEP_SUMMARY
            echo "3. Check container logs: \`cd ~/app && docker-compose logs\`" >> $GITHUB_STEP_SUMMARY
            echo "4. Check container status: \`docker-compose ps\`" >> $GITHUB_STEP_SUMMARY
          fi

  cleanup:
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    name: 🧹 Cleanup
    if: always() && needs.build-and-deploy.result == 'success'
    
    steps:
      - name: 🧹 Cleanup EC2 resources
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          timeout: 90s
          script: |
            echo "🧹 Starting cleanup of old Docker resources..."
            
            # Remove old backup containers (keep last 3)
            echo "🗑️ Removing old backup containers..."
            docker ps -a --filter "name=notifications-app-backup" --format "{{.Names}}" | sort -r | tail -n +4 | xargs -r docker rm -f || true
            
            # Clean up unused resources (but preserve volumes and recent images)
            echo "🧽 Cleaning up unused Docker resources..."
            docker container prune -f --filter "until=24h" || true
            docker image prune -f --filter "until=48h" || true
            docker network prune -f || true
            
            # Clean up old backups (keep last 5)
            echo "🗂️ Cleaning up old database backups..."
            cd ~/app && ls -t postgres_backup_*.tar.gz 2>/dev/null | tail -n +6 | xargs -r rm -f || true
            
            # Show final disk usage
            echo "💾 Final disk usage:"
            df -h /
            echo "🐳 Docker system usage:"
            docker system df
            
            echo "✅ Cleanup completed successfully!"
