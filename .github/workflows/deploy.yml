name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: ./app
        
      - name: Run tests
        run: ./gradlew test
        working-directory: ./app
        
      - name: Build application
        run: ./gradlew build -x test
        working-directory: ./app
        
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          timeout: 30s
          command_timeout: 15m
          script: |
            set -e  # Exit on any error
            
            echo "🔍 Current working directory: $(pwd)"
            echo "👤 Current user: $(whoami)"
            echo "📁 Home directory contents:"
            ls -la /home/deploy/ || echo "Deploy directory doesn't exist yet"
            
            echo "⏹️ Stopping existing application..."
            pkill -f "java.*bootRun" || echo "No existing Java process found"
            pkill -f "gradle.*bootRun" || echo "No existing Gradle process found"
            sleep 5
            
            echo "💾 Creating backup..."
            if [ -d "/home/deploy/notification-dispatch-system" ]; then
              BACKUP_DIR="/home/deploy/backup-$(date +%Y%m%d-%H%M%S)"
              echo "Creating backup at: $BACKUP_DIR"
              cp -r /home/deploy/notification-dispatch-system "$BACKUP_DIR"
              echo "✅ Backup created successfully"
            else
              echo "ℹ️ No existing application to backup"
            fi
            
            echo "📥 Pulling latest code..."
            cd /home/deploy
            
            if [ -d "notification-dispatch-system" ]; then
              echo "📂 Directory exists, pulling latest changes..."
              cd notification-dispatch-system
              git status
              git fetch origin main
              git reset --hard origin/main
              echo "✅ Code updated successfully"
            else
              echo "📁 Cloning repository..."
              git clone https://github.com/MustaphaBousilDev/notification-dispatch-system.git notification-dispatch-system
              cd notification-dispatch-system
              echo "✅ Repository cloned successfully"
            fi
            
            echo "🔨 Building application..."
            cd app
            ls -la  # Check if gradlew exists
            
            if [ ! -f "gradlew" ]; then
              echo "❌ gradlew not found in app directory"
              echo "📁 Current directory contents:"
              ls -la
              exit 1
            fi
            
            chmod +x gradlew
            echo "🏗️ Running clean build..."
            ./gradlew clean build -x test --info
            
            if [ $? -ne 0 ]; then
              echo "❌ Build failed"
              exit 1
            fi
            
            echo "✅ Build completed successfully"
            
            echo "⚙️ Updating configuration..."
            mkdir -p src/main/resources
            
            cat > src/main/resources/application.properties << 'EOF'
            # Database Configuration
            spring.datasource.url=jdbc:postgresql://localhost:5432/notifications
            spring.datasource.username=batch_user
            spring.datasource.password=${{ secrets.DB_PASSWORD }}
            spring.datasource.driver-class-name=org.postgresql.Driver
            
            # JPA Configuration
            spring.jpa.hibernate.ddl-auto=update
            spring.jpa.show-sql=false
            spring.jpa.properties.hibernate.format_sql=true
            spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
            
            # Server Configuration
            server.port=8080
            
            # Actuator Configuration
            management.endpoints.web.exposure.include=health,info
            management.endpoint.health.show-details=always
            
            # Logging Configuration
            logging.level.root=INFO
            logging.level.com.yourpackage=DEBUG
            logging.file.name=/home/deploy/app.log
            EOF
            
            echo "✅ Configuration updated"
            
            echo "🚀 Starting application..."
            # Kill any remaining processes on port 8080
            lsof -ti:8080 | xargs kill -9 2>/dev/null || echo "No process on port 8080"
            sleep 2
            
            # Start the application
            nohup ./gradlew bootRun > /home/deploy/app.log 2>&1 &
            APP_PID=$!
            echo "📋 Application started with PID: $APP_PID"
            
            echo "⏳ Waiting for application to start..."
            for i in {1..12}; do
              echo "🔍 Health check attempt $i/12..."
              sleep 10
              
              if curl -f http://localhost:8080/actuator/health 2>/dev/null; then
                echo "✅ Application started successfully!"
                echo "📊 Application health status:"
                curl -s http://localhost:8080/actuator/health | python3 -m json.tool || echo "Health endpoint responded"
                exit 0
              else
                echo "⌛ Application not ready yet, waiting..."
                if [ $i -eq 6 ]; then
                  echo "📋 Checking application logs (last 20 lines):"
                  tail -n 20 /home/deploy/app.log
                fi
              fi
            done
            
            echo "❌ Application failed to start within 2 minutes"
            echo "📋 Final application logs (last 50 lines):"
            tail -n 50 /home/deploy/app.log
            echo "📊 System resources:"
            free -h
            df -h
            echo "🔍 Process status:"
            ps aux | grep -E "(java|gradle)" | grep -v grep
            exit 1
