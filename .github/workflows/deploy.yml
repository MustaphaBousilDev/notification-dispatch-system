name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: ./app
        
      - name: Run tests
        run: ./gradlew test
        working-directory: ./app
        
      - name: Build application
        run: ./gradlew build -x test
        working-directory: ./app
        
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "‚èπÔ∏è Stopping existing application..."
            pkill -f "java.*bootRun" || true
            sleep 5
            
            echo "üíæ Creating backup..."
            if [ -d "/home/deploy/notification-dispatch-system" ]; then
              cp -r /home/deploy/notification-dispatch-system /home/deploy/backup-$(date +%Y%m%d-%H%M%S)
            fi
            
            echo "üì• Pulling latest code..."
            cd /home/deploy
            if [ -d "notification-dispatch-system" ]; then
              cd notification-dispatch-system
              git pull origin main
            else
              git clone https://github.com/${{ github.repository }}.git notification-dispatch-system
              cd notification-dispatch-system
            fi
            
            echo "üî® Building application..."
            cd app
            chmod +x gradlew
            ./gradlew clean build -x test
            
            echo "‚öôÔ∏è Updating configuration..."
            cat << 'EOF' > src/main/resources/application.properties
            spring.datasource.url=jdbc:postgresql://localhost:5432/notifications
            spring.datasource.username=batch_user
            spring.datasource.password=${{ secrets.DB_PASSWORD }}
            # ... rest of configuration
            EOF
            
            echo "üöÄ Starting application..."
            nohup ./gradlew bootRun > /home/deploy/app.log 2>&1 &
            
            echo "‚è≥ Waiting for application to start..."
            sleep 30
            
            if curl -f http://localhost:8080/actuator/health 2>/dev/null; then
              echo "‚úÖ Application started successfully!"
            else
              echo "‚ùå Application failed to start. Checking logs..."
              tail -n 50 /home/deploy/app.log
              exit 1
            fi
