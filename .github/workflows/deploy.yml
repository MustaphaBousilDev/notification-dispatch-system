name: Fixed Parallel CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read

env:
  IMAGE_NAME: notifications-app
  CONTAINER_NAME: notifications-app
  REGISTRY: ghcr.io

jobs:
  # ==============================================================================
  # 🚀 PHASE 1: PARALLEL QUALITY CHECKS
  # ==============================================================================
  
  unit-tests:
    runs-on: ubuntu-latest
    name: 🧪 Unit Tests
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: ☕ Setup JDK 17 with caching
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
          
      - name: 📦 Setup Gradle with caching
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: false
          
      - name: 🔧 Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: ./app
        
      - name: 🧪 Run tests only
        run: ./gradlew test --parallel --build-cache
        working-directory: ./app
        
      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_number }}
          path: |
            app/build/test-results/
            app/build/reports/
          retention-days: 30

  
  security-scan:
    runs-on: ubuntu-latest
    name: 🔒 Security Scan
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🔒 Security analysis
        run: |
          echo "Running security scans..."
          # Add security scanning tools here

  # ==============================================================================
  # 🚀 PHASE 2: BUILD
  # ==============================================================================
  
  build:
    runs-on: ubuntu-latest
    name: 🏗️ Build Application
    needs: [unit-tests, security-scan]
    outputs:
      jar-name: ${{ steps.build-info.outputs.jar-name }}
      image-tag: ${{ steps.build-info.outputs.image-tag }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: ☕ Setup JDK 17 with caching
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
          
      - name: 📦 Setup Gradle with caching
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: false
          
      - name: 🔧 Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: ./app
        
      - name: 🏗️ Build JAR (skip tests)
        run: ./gradlew clean build -x test --parallel --build-cache
        working-directory: ./app
        
      - name: 📊 Extract build info
        id: build-info
        run: |
          JAR_NAME=$(ls app/build/libs/*.jar | head -1 | xargs basename)
          IMAGE_TAG="v${{ github.run_number }}-$(echo ${{ github.sha }} | cut -c1-7)"
          echo "jar-name=$JAR_NAME" >> $GITHUB_OUTPUT
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          
      - name: 📤 Upload JAR artifact  
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: app/build/libs/*.jar
          retention-days: 1
          
      - name: 📋 Upload deployment files
        uses: actions/upload-artifact@v4
        with:
          name: deployment-files
          path: |
            docker-compose.yaml
            Dockerfile
          retention-days: 1

  # ==============================================================================
  # 🚀 PHASE 3: DOCKER BUILD (Fixed)
  # ==============================================================================
  
  docker-build:
    needs: build
    runs-on: ubuntu-latest
    name: 🐳 Docker Build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 📥 Download JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: app/build/libs/
          
      - name: 📥 Download deployment files
        uses: actions/download-artifact@v4
        with:
          name: deployment-files
          path: .
          
      # 🚀 FIX 1: Verify JAR file exists
      - name: 🔍 Verify JAR file
        run: |
          echo "📋 Checking JAR file..."
          ls -la app/build/libs/
          JAR_FILE=$(ls app/build/libs/*.jar | head -1)
          echo "Found JAR: $JAR_FILE"
          echo "JAR size: $(stat -c%s "$JAR_FILE") bytes"
          
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # 🚀 FIX 2: Build and save Docker image properly
      - name: 🏗️ Build Docker image
        run: |
          echo "🐳 Building Docker image..."
          
          # Build the image
          docker build \
            -t ${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-tag }} \
            -t ${{ env.IMAGE_NAME }}:latest \
            -f Dockerfile .
          
          # Verify image was built
          docker images | grep ${{ env.IMAGE_NAME }}
          
          # Save image to tar file
          echo "💾 Saving Docker image to tar..."
          docker save ${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-tag }} -o /tmp/docker-image.tar
          
          # Verify tar file was created and has content
          ls -la /tmp/docker-image.tar
          echo "Tar file size: $(stat -c%s /tmp/docker-image.tar) bytes"
          
          # Ensure tar file is not empty
          if [ ! -s /tmp/docker-image.tar ]; then
            echo "❌ Docker image tar file is empty!"
            exit 1
          fi
          
          echo "✅ Docker image saved successfully"
          
      - name: 📤 Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/docker-image.tar
          retention-days: 1

  # ==============================================================================
  # 🚀 PHASE 4: DEPLOY (Fixed transfer)
  # ==============================================================================
  
  deploy:
    needs: [build, docker-build]
    runs-on: ubuntu-latest
    name: 🚀 Deploy
    
    steps:
      - name: 📥 Download deployment files
        uses: actions/download-artifact@v4
        with:
          name: deployment-files
          path: .
          
      # 🚀 FIX 3: Download and verify Docker image
      - name: 📥 Download and verify Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp/
          
      - name: 🔍 Verify Docker image file
        run: |
          echo "🔍 Verifying Docker image file..."
          ls -la /tmp/
          
          # Check if docker-image.tar exists and has content
          if [ -f "/tmp/docker-image.tar" ]; then
            echo "✅ Docker image file found"
            echo "File size: $(stat -c%s /tmp/docker-image.tar) bytes"
            
            # Verify it's a valid tar file
            if tar -tf /tmp/docker-image.tar >/dev/null 2>&1; then
              echo "✅ Docker image tar file is valid"
            else
              echo "❌ Docker image tar file is corrupted"
              exit 1
            fi
          else
            echo "❌ Docker image file not found!"
            exit 1
          fi
          
      - name: 📋 Create optimized deployment files
        run: |
          # Environment file
          cat > .env << EOF
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          SPRING_PROFILES_ACTIVE=docker
          IMAGE_TAG=${{ needs.build.outputs.image-tag }}
          DEPLOYMENT_TIME="$(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          EOF
          
          # Fast deployment script
          cat > fast-deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          GREEN='\033[0;32m'; RED='\033[0;31m'; BLUE='\033[0;34m'; NC='\033[0m'
          log() { echo -e "${GREEN}[$(date +'%H:%M:%S')]${NC} $1"; }
          step() { echo -e "${BLUE}▶${NC} $1"; }
          
          step "Verifying Docker image file..."
          if [ ! -f "/tmp/docker-image.tar" ]; then
            echo "❌ Docker image file not found!"
            exit 1
          fi
          
          FILE_SIZE=$(stat -c%s /tmp/docker-image.tar)
          echo "Docker image file size: $FILE_SIZE bytes"
          
          if [ "$FILE_SIZE" -eq 0 ]; then
            echo "❌ Docker image file is empty!"
            exit 1
          fi
          
          step "Loading Docker image..."
          docker load -i /tmp/docker-image.tar
          
          step "Verifying loaded image..."
          docker images | grep notifications-app || {
            echo "❌ Failed to load Docker image"
            exit 1
          }
          
          step "Preparing for deployment..."
          [ -f .env ] && source .env
          
          DOCKER_COMPOSE="docker compose"
          command -v docker-compose >/dev/null && DOCKER_COMPOSE="docker-compose"
          
          step "Performing deployment..."
          if docker ps -q -f name=notifications-app >/dev/null 2>&1; then
            log "Updating existing container..."
            $DOCKER_COMPOSE up -d --force-recreate notifications-app
          else
            log "Starting fresh deployment..."
            $DOCKER_COMPOSE up -d
          fi
          
          step "Health check (60s max)..."
          for i in {1..12}; do
            if curl -f -s http://localhost:8080/actuator/health >/dev/null 2>&1; then
              log "✅ Application is healthy!"
              break
            fi
            [ $i -eq 12 ] && { echo "❌ Health check failed"; docker logs notifications-app --tail 10; exit 1; }
            sleep 5
          done
          
          log "🎉 Deployment completed successfully!"
          $DOCKER_COMPOSE ps
          EOF
          
          chmod +x fast-deploy.sh

      - name: 🔍 SSH Configuration Check
        run: |
          if [ -z "${{ secrets.EC2_HOST }}" ] || [ -z "${{ secrets.EC2_USERNAME }}" ] || [ -z "${{ secrets.EC2_SSH_KEY }}" ]; then
            echo "❌ SSH secrets not properly configured"
            exit 1
          fi
          echo "✅ SSH secrets are configured"

      - name: 🔍 Test SSH Connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 30s
          script: |
            echo "✅ SSH connection successful!"
            mkdir -p ~/app
            echo "📁 App directory prepared"

      # 🚀 FIX 4: Transfer files separately and verify
      - name: 📤 Transfer deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ".env,fast-deploy.sh,docker-compose.yaml"
          target: "~/app/"
          timeout: 60s
          overwrite: true
          debug: true
          
      # 🚀 FIX 5: Transfer Docker image with verification
      - name: 📤 Transfer Docker image
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "/tmp/docker-image.tar"
          target: "~/app/tmp/"
          timeout: 300s  # Increased timeout for large file
          overwrite: true
          debug: true

      # 🚀 FIX 6: Verify transfer and move file
      - name: 🔍 Verify file transfer
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 60s
          script: |
            echo "🔍 Verifying transferred files..."
            
            # Check deployment files
            ls -la ~/app/
            
            # Check Docker image
            if [ -f "~/app/tmp/docker-image.tar" ]; then
              echo "✅ Docker image file transferred"
              echo "File size: $(stat -c%s ~/app/tmp/docker-image.tar) bytes"
              
              # Move to correct location
              mv ~/app/tmp/docker-image.tar /tmp/docker-image.tar
              echo "✅ Docker image moved to /tmp/docker-image.tar"
            else
              echo "❌ Docker image file not found after transfer!"
              ls -la ~/app/tmp/ || echo "tmp directory not found"
              exit 1
            fi

      - name: 🚀 Execute deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 300s
          script: |
            cd ~/app
            echo "🚀 Starting deployment..."
            bash fast-deploy.sh
            
      - name: 📊 Final verification
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 30s
          script: |
            cd ~/app
            echo "📊 Final Status:"
            if docker compose version &> /dev/null; then
                docker compose ps
            else
                docker-compose ps
            fi
            
            echo "🏥 Health Check:"
            curl -s http://localhost:8080/actuator/health | head -5

  # ==============================================================================
  # 🚀 CLEANUP
  # ==============================================================================
  
  cleanup:
    needs: deploy
    runs-on: ubuntu-latest
    name: 🧹 Cleanup
    if: always() && needs.deploy.result == 'success'
    
    steps:
      - name: 🧹 Background cleanup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 60s
          script: |
            (
              cd ~/app
              docker system prune -f --filter "until=24h"
              rm -f /tmp/docker-image.tar
              rm -rf ~/app/tmp/
            ) &
            echo "✅ Cleanup started in background"