plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.auth'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.kafka:spring-kafka'
    
    // PostgreSQL driver - EXPLICIT version for guaranteed inclusion
    implementation 'org.postgresql:postgresql:42.7.3'
    
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Disable the plain JAR to avoid confusion
jar {
    enabled = false
}

// Optional: Add verification task for local testing
tasks.register('verifyPostgreSQL') {
    dependsOn bootJar
    doLast {
        def bootJarFile = bootJar.outputs.files.singleFile
        println "=== Checking JAR: ${bootJarFile.name} ==="
        println "JAR size: ${bootJarFile.length() / 1024 / 1024} MB"
        
        def jarCommand = ["jar", "tf", bootJarFile.absolutePath]
        def proc = jarCommand.execute()
        def output = proc.text
        
        def pgFiles = output.split('\n').findAll { it.contains('postgresql') }
        
        if (pgFiles.size() > 0) {
            println "✅ PostgreSQL driver found! (${pgFiles.size()} files)"
            println "Sample PostgreSQL files:"
            pgFiles.take(5).each { println "  - $it" }
        } else {
            println "❌ PostgreSQL driver NOT found!"
            println "First 20 entries in JAR:"
            output.split('\n').take(20).each { println "  - $it" }
            throw new GradleException("PostgreSQL driver missing from JAR")
        }
    }
}